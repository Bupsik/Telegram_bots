
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
import nest_asyncio
import datetime

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –ó–æ–π—Ü-–±–æ—Ç! –ù–∞–ø–∏—à–∏ /wassup, —á—Ç–æ–±—ã —è —Å–ø—Ä–æ—Å–∏–ª –∫–∞–∫ –¥–µ–ª–∞. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è - /timenow")

async def how_are_you(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫ –¥–µ–ª–∞?")
    await update.message.reply_photo(photo=open('D:/Telegram_Bot/Balu_Hello.jpg', 'rb'))

async def time_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è   
    now = datetime.datetime.now()
    today = datetime.datetime.today()
    
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    time_str = now.strftime("%H:%M:%S")
    date_str = today.strftime("%d.%m.%Y")
    weekday_str = now.strftime("%A")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üïí –í—Ä–µ–º—è: {time_str}\n"
        f"üìå –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday_str}"
        )
    
    await update.message.reply_text(message)
       
async def main():
    application = Application.builder().token("7360719959:AAFOZDqBoa6KtOJpaSKZriVWN3s69mQ6Xis").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("wassup", how_are_you))
    application.add_handler(CommandHandler("timenow", time_now))
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –±–æ—Ç–∞
    bot_task = asyncio.create_task(application.run_polling())
    
    try:
        while True:
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        await application.stop()
        await bot_task

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
       print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
