
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
import nest_asyncio
from datetime import datetime, timedelta
import requests

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –ó–æ–π—Ü-–±–æ—Ç! –ù–∞–ø–∏—à–∏ /wassup, —á—Ç–æ–±—ã —è —Å–ø—Ä–æ—Å–∏–ª –∫–∞–∫ –¥–µ–ª–∞. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è - /timenow !–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –Ω–∞–∂–º–∏ /pogoda")

async def how_are_you(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫ –¥–µ–ª–∞?")
    await update.message.reply_photo(photo=open('D:/Telegram_Bot/Balu_Hello.jpg', 'rb'))

async def time_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è   
    now = datetime.now()
    today = datetime.today()
    
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    time_str = now.strftime("%H:%M:%S")
    date_str = today.strftime("%d.%m.%Y")
    weekday_str = now.strftime("%A")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üïí –í—Ä–µ–º—è: {time_str}\n"
        f"üìå –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday_str}"
        )
    
    await update.message.reply_text(message)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã
YANDEX_API_URL = "https://api.weather.yandex.ru/v2/forecast"
YANDEX_API_KEY = "861e91e6-8736-4fc6-902c-84435c909dc2"  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://yandex.ru/dev/weather/
MOSCOW_COORDS = {"lat": 55.7558, "lon": 37.6173}  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã

async def pogoda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        forecast = get_yandex_forecast()
        
        message = (
            f"üå§Ô∏è <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>\n (–ü–æ –¥–∞–Ω–Ω—ã–º –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞)\n\n"
            f"üìÖ <b>{forecast['date']}</b>\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {forecast['temp_min']}¬∞C –¥–æ {forecast['temp_max']}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast['humidity']}%\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {forecast['wind_speed']} –º/—Å, {forecast['wind_dir']}\n"
            f"‚òÅ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {forecast['clouds']}\n"
            f"üåß –û—Å–∞–¥–∫–∏: {forecast['precipitation']}\n"
            f"üìù {forecast['description']}"
        )
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def get_yandex_forecast():
    headers = {"X-Yandex-API-Key": YANDEX_API_KEY}
    params = {
        "lat": MOSCOW_COORDS["lat"],
        "lon": MOSCOW_COORDS["lon"],
        "lang": "ru_RU",
        "limit": 2  # –°–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
    }
    
    response = requests.get(YANDEX_API_URL, headers=headers, params=params)
    
    if response.status_code != 200:
        raise ValueError(f"API error: {response.status_code}")
    
    data = response.json()
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
    
    day_forecast = data["forecasts"][1]
    day_part = day_forecast["parts"]["day"]
    
    return {
        'date': tomorrow,
        'temp_min': int(day_part["temp_min"]),
        'temp_max': int(day_part["temp_max"]),
        'humidity': int(day_part["humidity"]),
        'wind_speed': round(float(day_part["wind_speed"]), 1),
        'wind_dir': get_wind_direction(day_part["wind_dir"]),
        'clouds': get_clouds_description(day_part["cloudness"]),
        'precipitation': get_precipitation(day_forecast),
        'description': str(day_part["condition"]).capitalize()
    }

def get_wind_direction(degrees):
    directions = ["–°", "–°–í", "–í", "–Æ–í", "–Æ", "–Æ–ó", "–ó", "–°–ó"]
    try:
        return directions[round(float(degrees) / 45) % 8]
    except:
        return ""
    
def get_clouds_description(cloudness):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        cloudness = float(cloudness) if isinstance(cloudness, str) else cloudness
        percentage = round(cloudness * 100)  # cloudness –æ–±—ã—á–Ω–æ –æ—Ç 0.0 –¥–æ 1.0
        
        if percentage <= 10:
            return "–Ø—Å–Ω–æ"
        elif percentage <= 30:
            return "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ"
        elif percentage <= 70:
            return "–û–±–ª–∞—á–Ω–æ"
        else:
            return "–ü–∞—Å–º—É—Ä–Ω–æ"
    except (TypeError, ValueError):
        return "–û–±–ª–∞—á–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

def get_precipitation(forecast):
    try:
        prec_type = forecast["parts"]["day"].get("prec_type", "")
        prec_strength = forecast["parts"]["day"].get("prec_strength", 0)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(prec_strength, str):
            prec_strength = float(prec_strength)
        
        prec_types = {
            "rain": "–¥–æ–∂–¥—å",
            "snow": "—Å–Ω–µ–≥",
            "sleet": "–º–æ–∫—Ä—ã–π —Å–Ω–µ–≥",
            "": "–Ω–µ—Ç"
        }
        
        prec_intensity = {
            0: "",
            0.25: "—Å–ª–∞–±—ã–π ",
            0.5: "—É–º–µ—Ä–µ–Ω–Ω—ã–π ",
            0.75: "—Å–∏–ª—å–Ω—ã–π ",
            1: "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π "
        }.get(prec_strength, "")
        
        return f"{prec_intensity}{prec_types.get(prec_type, '')}" or "–ù–µ—Ç –æ—Å–∞–¥–∫–æ–≤"
    except Exception:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å–∞–¥–∫–∞—Ö"
       
async def main():
    with open('TG_API_key.txt', 'r') as file:
        API_key = file.read().strip() 
    application = Application.builder().token(API_key).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("wassup", how_are_you))
    application.add_handler(CommandHandler("timenow", time_now))
    application.add_handler(CommandHandler("pogoda", pogoda))
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –±–æ—Ç–∞
    bot_task = asyncio.create_task(application.run_polling())
    
    try:
        while True:
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        await application.stop()
        await bot_task

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
       print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
